import requests
import json
import pandas as pd

# Load the dataset
def load_dataset(filepath):
    df = pd.read_csv(filepath)
    return df['key_point'].tolist()  # Assuming the column is named 'sentence'


def get_label_and_rationale(sentence):
    # The API endpoint and key placeholders
    api_url = "https://api.openai.com/v4/completions"
    api_key = ""

    # Construct the prompt to send to the API
    # This is a simple template; you might need to adjust it based on your needs
    prompt = f"Please provide a concise rationale for the following sentence that indicates its stance, make sure the rationale to be shorter than the sentence:\n\nSentence: \"{sentence}\"\n\nRationale:"

    # Prepare the data payload for the POST request
    data = {
        "model": "text-davinci-003",  # or another model of your choice
        "prompt": prompt,
        "temperature": 0.7,  # Adjust as needed for creativity
        "max_tokens": 10,  # Adjust based on how long you expect the rationale to be
        "top_p": 1.0,
        "frequency_penalty": 0.0,
        "presence_penalty": 0.0,
        "stop": ["\n"]  # Stop generating further if a new line is reached
    }

    # Make the HTTP POST request
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    response = requests.post(api_url, headers=headers, json=data)

    # Check if the request was successful
    if response.status_code == 200:
        # Parse the response
        response_data = response.json()
        # Extract the text generated by the model
        rationale = response_data.get('choices', [{}])[0].get('text', '').strip()
        # Placeholder for label determination; you might use a different approach
        label = "Determined Label"  # This should be replaced with actual label determination logic
        return label, rationale
    else:
        print(f"Failed to get rationale, status code: {response.status_code}")
        return None, None


def write_to_document(sentences, output_filepath):
    with open(output_filepath, 'w') as f:
        for sentence in sentences:
            label, rationale = get_label_and_rationale(sentence)
            # Ensure the rationale is concise and not as long as the original sentence
            if len(rationale) >= len(sentence):
                rationale = ""
            f.write(f"{sentence},{label},{rationale}\n")


def main():
    input_filepath = 'data\ArgKP-2021_dataset_2.csv'
    output_filepath = 'data\ArgKP-2021_dataset_gpt.csv'
    sentences = load_dataset(input_filepath)
    write_to_document(sentences, output_filepath)

if __name__ == "__main__":
    main()
